version: 0.8.{build}
environment:
  global:
    ASCIIDOCTOR_VER: 1.5.4
    CFLAGS: /MP
  matrix:
    # array of all environments used to test builds
    # The latest Visual Studio 2017 is our "preferred" environment.
    # We expect that it runs fastest too.

    # VS 2017, 64-bit, Release
    - GENERATOR: Visual Studio 15 2017
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      CFG: Release
      VSINSTALL: '"Microsoft Visual Studio"/2017/Community/VC/Auxiliary/Build'
      MSVC_PLATFORM: amd64

    # VS 2017, 64-bit
    - GENERATOR: Visual Studio 15 2017
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      CFG: Debug
      VSINSTALL: '"Microsoft Visual Studio"/2017/Community/VC/Auxiliary/Build'
      MSVC_PLATFORM: amd64

    # VS 2017, 32-bit
    - GENERATOR: Visual Studio 15 2017
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      CFG: Debug
      VSINSTALL: '"Microsoft Visual Studio"/2017/Community/VC/Auxiliary/Build'
      MSVC_PLATFORM: x86

    # VS 2017, 64-bit, NMakefiles
    - GENERATOR: NMake Makefiles
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      CFG: Debug
      CMAKE_FLAGS: -DCMAKE_BUILD_TYPE=Debug
      VSINSTALL: '"Microsoft Visual Studio"/2017/Community/VC/Auxiliary/Build'
      MSVC_PLATFORM: amd64

    # VS 2017 64-bit, Static
    - GENERATOR: Visual Studio 15 2017
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      CFG: Debug
      VSINSTALL: '"Microsoft Visual Studio"/2017/Community/VC/Auxiliary/Build'
      MSVC_PLATFORM: amd64
      CMAKE_FLAGS: -DNN_STATIC_LIB=ON

    # VS 2017 32-bit, Static
    - GENERATOR: Visual Studio 15 2017
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      CFG: Debug
      VSINSTALL: '"Microsoft Visual Studio"/2017/Community/VC/Auxiliary/Build'
      MSVC_PLATFORM: x86
      CMAKE_FLAGS: -DNN_STATIC_LIB=ON

    # VS 2015, 32-bit
    - GENERATOR: Visual Studio 14 2015
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      CFG: Debug
      VSINSTALL: '"Microsoft Visual Studio 14.0"/VC'
      MSVC_PLATFORM: x86

    # VS 2013, 32-bit
    - GENERATOR: Visual Studio 12 2013
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      CFG: Debug
      VSINSTALL: '"Microsoft Visual Studio 12.0"/VC'
      MSVC_PLATFORM: x86

    # VS 2012 32-bit
    - GENERATOR: Visual Studio 11 2012
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      CFG: Debug
      VSINSTALL: '"Microsoft Visual Studio 11.0"/VC'
      MSVC_PLATFORM: x86

    # VS 2010, 64-bit
    - GENERATOR: Visual Studio 10 2010 Win64
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      CFG: Debug
      VSINSTALL: '"Microsoft Visual Studio 10.0"/VC'
      MSVC_PLATFORM: amd64

    # MinGW-W64, 64-bit
    # This does not work yet .. presumably because we have to use pacman
    # to install the actual compiler and set up some supporting variables.
    # To be honest, we don't think anyone should really be using mingw,
    # since VS is now free; for Linux there is WSL, but AppVeyor support
    # for WSL is unclear.
    #- GENERATOR: MinGW Makefiles
    #  APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    #  VSINSTALL: '"Microsoft Visual Studio"/2017/Community/VC/Auxiliary/Build'
    #  PREFIX_PATH: -DCMAKE_PREFIX_PATH=C:\msys64
    #  CFG: Debug
    #  MSVC_PLATFORM: amd64


cache:
  - '%USERPROFILE%\asciidoctor-%ASCIIDOCTOR_VER%.gem -> .appveyor.yml'

install:
  # Gem fetching can sometimes be excruciatingly slow due to the rubygems database,
  # so we have to manually download our target gem.
  - ps: |
      $asciidoctor = "$($env:USERPROFILE)\asciidoctor-$($env:ASCIIDOCTOR_VER).gem"
      if (-not (Test-Path $asciidoctor)) {
          $url = "https://rubygems.org/downloads/asciidoctor-$($env:ASCIIDOCTOR_VER).gem"
          Write-Output "Downloading asciidoctor $env:ASCIIDOCTOR_VER from $url"
          (New-Object Net.WebClient).DownloadFile($url, $asciidoctor)
      }
      gem install --no-document --local $asciidoctor


init:
   - cmake --version
   - C:\"Program Files (x86)"/%VSINSTALL%/vcvarsall.bat %MSVC_PLATFORM%

build:
  parallel: true

build_script:
  - md build
  - cd build
  - cmake -G "%GENERATOR%" -DCMAKE_BUILD_TYPE=%CFG% %STATIC_LIB% %PREFIX_PATH% ..
  - cmake --build . --config %CFG% 

test_script:
  - ctest --output-on-failure -C %CFG%
