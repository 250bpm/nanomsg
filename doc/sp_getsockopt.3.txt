sp_getsockopt(3)
================

NAME
----
sp_getsockopt - retrieve a socket option


SYNOPSIS
--------
*#include <sp/sp.h>*

*int sp_getsockopt (int 's', int 'level', int 'option', void '*optval', size_t '*optvallen');*

DESCRIPTION
-----------
Retrieves the value for the 'option'. The 'level' argument specifies
the protocol level at which the option resides. For generic socket-level options
use _SP_SOL_SOCKET_ level. For socket-type-specific options use socket type
for 'level' argument (e.g. _SP_SUB_). For transport-specific options use ID of
the transport as the 'level' argument (e.g. _SP_TCP_).

The value is stored in the buffer pointed to by 'optval' argument. Size of the
buffer is specified by the 'optvallen' argument. If the size of the option is
greater than size of the buffer, the value will be silently truncated.
Otherwise, the 'optvallen' will be modified to indicate the actual length of
the option.

_<sp/sp.h>_ header defines generic socket-level options (_SP_SOL_SOCKET_ level).
The options are as follows:

*SP_LINGER*::
    Specifies how long should the socket try to send pending outbound messages
    after _sp_close()_ have been called, in milliseconds. The type of the option
    is int. Default value is 1000 (1 second).
*SP_SNDBUF*::
    Size of the send buffer, in bytes. To prevent blocking for messages larger
    than the buffer, exactly one message may be buffered in addition to the data
    in the send buffer. The type of this option is int. Default value is 128kB.
*SP_RCVBUF*::
    Size of the receive buffer, in bytes. To prevent blocking for messages
    larger than the buffer, exactly one message may be buffered in addition
    to the data in the receive buffer. The type of this option is int. Default
    value is 128kB.
*SP_SNDTIMEO*::
    The timeout for send operation on the socket, in milliseconds. If message
    cannot be sent within the specified timeout, EAGAIN error is returned.
    Value of -1 means infinite timeout. The type of the option is int.
    Default value is -1.
*SP_RCVTIMEO*::
    The timeout for recv operation on the socket, in milliseconds. If message
    cannot be received within the specified timeout, EAGAIN error is returned.
    Value of -1 means infinite timeout. The type of the option is int.
    Default value is -1.
*SP_RECONNECT_IVL*::
    For connection-based transports such as TCP, this option specifies how
    long to wait, in milliseconds, when connection is broken before trying
    to re-establish it. Note that actual reconnect interval may be randomised
    to some extent to prevent severe reconnection storms. The type of the option
    is int. Default value is 100 (0.1 second).
*SP_RECONNECT_IVL_MAX*::
    This option is to be used only in addition to _SP_RECONNECT_IVL_ option.
    It specifies maximum reconnection interval. On each reconnect attempt,
    the previous interval is doubled until _SP_RECONNECT_IVL_MAX_ is reached.
    Value of zero means that no exponential backoff is performed and reconnect
    interval is based only on _SP_RECONNECT_IVL_. The type of the option is int.
    Default value is 0.


RETURN VALUE
------------
If the function succeeds zero is returned. Otherwise, negative number is
returned and 'errno' is set to to one of the values defined below.


ERRORS
------
*EFAULT*::
The library is not initialised.
*EBADF*::
The provided socket is invalid.
*ENOPROTOOPT*::
The option is unknown at the level indicated.
*ETERM*::
The library is terminating.

EXAMPLE
-------

----
int linger;
size_t sz = sizeof (linger);
sp_getsockopt (s, SOL_SP, SP_LINGER, &linger, &sz);
----


SEE ALSO
--------
linknanomsg:sp_socket[3]
linknanomsg:sp_setsockopt[3]
linknanomsg:nanomsg[7]

AUTHORS
-------
Martin Sustrik <sustrik@250bpm.com>

